# -*- coding: utf-8 -*-
"""
Created on Mon May  1 10:05:03 2017
@author: Johnson, Brian, and Brendan
"""

import numpy as np
import numpy.linalg as la
import random as randy
import math
    
#pop = []
#stats = []
#
#for x in range(lpop):
#    pop.append(0)
#    stats.append(0) 
#pop = np.array([pop])
#stats = np.array([stats])
# popSize: Total population size
# initInfect: How many to infect to start with
def initRandyInfect(popSize, initInfect):
    # Total population size
    # Array of the population: 3 values for each individual: infection number, immunity number, status (susceptible, infected, infectious, symptomatic, immune)
    pop = np.zeros((popSize, 3))
    # Set initial immunity
    for x in range(popSize):
        pop[x][1] = np.random.normal(2.5,.15)
    # Go through and place each infected member
    for x in range(initInfect):
        # Random integer in [0,lpop]
        infect = math.floor(popSize*randy.random())
        # Make sure this member isn't already infected. Else get a new random number
        while (pop[infect][0] != 0):
            infect = math.floor(popSize*randy.random())
        # Add to the infection level
        pop[infect][0] += 10/pop[infect][1]
        # Set the status to infected
        pop[infect][2] = 1
    #Return the new infected population
    return pop

# Simulate 1 day
def oneDay(pop):
    # Go through each individual
    for x in range(int(pop.size/3)):
        # Infectious and Symptomatic individual
        if (pop[x][2] == 2 or pop[x][2] == 3):
            # Increase immunity
            pop[x][1] += 2
            # Add to their own infection
            pop[x][0] *= 10/pop[x][1]
            # Change to symptomatic when reaches 15 infection level
            if pop[x][0] >= 15:
                pop[x][2] = 3
            # Change to immune if drop back below 10
            if pop[x][0] <= 10:
                pop[x][2] = 4
            # Infect others. Number of people on each side is Poisson distributed: rate param 4
            numInf = np.random.poisson(4)
            # Go through each person to be possibly infected.
            for i in range(2*numInf):
                print(i)
                # Possible new infected person
                j = x - numInf + i
                print(j)
                #Wrap around if j is negative or past the array
                if(j < 0):
                    j += int(pop.size/3)
                elif(j >= 50):
                    j -= int(pop.size/3)
                print(j)
                # Don't want to infect the person who is infecting, and can't infect already infected persons.
                if (i != numInf and pop[j][2] == 0):
                    # Calc contact times in contact using Exp. distribution
                    time = np.random.exponential(1)
                    # Infcetion level depends on infection of infectious individual, length of contact
                    infection = pop[x][0]*time/10
                    # Only infect if the infection count is greater than 1
                    if (infection > 1):
                        # Add infection to the individual
                        pop[j][0] += infection
                        # Set status to symptomatic
                        pop[j][2] = 1   
        # Infected individual
        elif (pop[x][2] == 1):
            # Increase immunity
            pop[x][1] += 2
            # Add to their infection
            pop[x][0] *= 10/pop[x][1]
            # Change to infectious if reach 10
            if pop[x][0] >= 10:
                pop[x][2] = 2
        # Immune or Susceptible individual
        elif (pop[x][2] == 0 or pop[x][2] == 4):
            #Do nothing?
            y = 0
    return pop
